(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{317:function(t,r,s){t.exports=s.p+"assets/img/string1.8f4c19e6.jpg"},318:function(t,r,s){t.exports=s.p+"assets/img/string2.828bc774.jpg"},383:function(t,r,s){"use strict";s.r(r);var n=s(28),a=Object(n.a)({},(function(){var t=this,r=t.$createElement,n=t._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"字符串处理类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串处理类"}},[t._v("#")]),t._v(" 字符串处理类")]),t._v(" "),n("p",[t._v("java里string是类的对象\n")]),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#字符串处理类"}},[t._v("字符串处理类")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-创建string对象"}},[t._v("1 创建String对象")])]),n("li",[n("a",{attrs:{href:"#_2-string对象常用方法"}},[t._v("2 String对象常用方法")]),n("ul",[n("li",[n("a",{attrs:{href:"#_2-1-字符串与byte数组间的转换"}},[t._v("2.1 字符串与byte数组间的转换")])])])]),n("li",[n("a",{attrs:{href:"#_3-和-equals方法的区别"}},[t._v("3 == 和 equals方法的区别")])]),n("li",[n("a",{attrs:{href:"#_4-string的不可变性"}},[t._v("4 String的不可变性")])]),n("li",[n("a",{attrs:{href:"#_5-字符串stringbuilder"}},[t._v("5 字符串StringBuilder")])])])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"_1-创建string对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建string对象"}},[t._v("#")]),t._v(" 1 创建String对象")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('String s1 = "lcs";\nString s2 = new String();\nString s3 = new String("lcs");\n')])])]),n("hr"),t._v(" "),n("h2",{attrs:{id:"_2-string对象常用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-string对象常用方法"}},[t._v("#")]),t._v(" 2 String对象常用方法")]),t._v(" "),n("p",[n("img",{attrs:{src:s(317),alt:"String对象常用方法"}})]),t._v(" "),n("p",[t._v("(输出，输入)")]),t._v(" "),n("h3",{attrs:{id:"_2-1-字符串与byte数组间的转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-字符串与byte数组间的转换"}},[t._v("#")]),t._v(" 2.1 字符串与byte数组间的转换")]),t._v(" "),n("p",[t._v("网络传输数据是通过二进制字节进行，接受数据需要将byte转为字符串。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import imooc.lcs.test.HException;\nimport sun.nio.cs.ext.GBK;\n\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.StandardCharsets;\n\npublic class Test1 {\n    public static void main(String[] args) throws UnsupportedEncodingException {\n       String st1 = "JAVA 编程 基础";\n//       byte[] arrs = st1.getBytes("UTF-8");\n       byte[] arrs = st1.getBytes("GBK");\n       for (int i=0;i< arrs.length;i++){\n           System.out.print(arrs[i]+" ");   //UTF-8:74 65 86 65 32 -25 -68 -106 -25 -88 -117 32 -27 -97 -70 -25 -95 -128\n                                            //GBK:74 65 86 65 32 -79 -32 -77 -52 32 -69 -7 -76 -95\n       }\n        System.out.println("============");\n        String str2 = new String(arrs,"GBK");  //保持字符集一致\n        System.out.println(str2);\n    }\n}\n')])])]),n("hr"),t._v(" "),n("h2",{attrs:{id:"_3-和-equals方法的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-和-equals方法的区别"}},[t._v("#")]),t._v(" 3 == 和 equals方法的区别")]),t._v(" "),n("blockquote",[n("p",[t._v("== 判断内存地址是否一致\nequals 判断内容是否一致")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('String str1 = "lcs";\nString str2 = "lcs";\nString str3 = new String("lcs");\n\nstr1.equals(str2);    // true\nstr1.equals(str3);\t\t//true\n\nstr1 == str2;\t//true\nstr1 == str3;\t//false\n')])])]),n("blockquote",[n("p",[t._v("内存存储情况\n"),n("img",{attrs:{src:s(318),alt:""}}),t._v("\n【常量池】的作用就是复用")])]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"_4-string的不可变性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-string的不可变性"}},[t._v("#")]),t._v(" 4 String的不可变性")]),t._v(" "),n("p",[t._v("所谓可变：就是创建了新的对象，所指向的内存空间不变。")]),t._v(" "),n("p",[t._v("String类是final类型的。final修饰引用类型，它保存的仅仅是一个引用，final只保证这个引用类型变量所引用的地址不会改变，也就是一直引用同一个对象，但这个对象完全可以发生改变。")]),t._v(" "),n("p",[t._v("当我们使字面量进行创建字符串时，会在常量池中查找是否有相同值的字符串，如果有则会返回其引用，否则会创建新的字符串，并返回新字符串的引用。")]),t._v(" "),n("blockquote",[n("p",[t._v("为什么String要设计成不可变")])]),t._v(" "),n("p",[t._v("主要是从缓存、安全性、线程安全和性能等角度出发的。")]),t._v(" "),n("blockquote",[n("p",[t._v("缓存\n字符串是使用最广泛的数据结构。大量的字符串的创建是非常耗费资源的，所以，Java提供了对字符串的缓存功能，可以大大地节省堆空间。")])]),t._v(" "),n("blockquote",[n("p",[t._v("安全性：\n字符串在Java应用程序中广泛用于存储敏感信息，如用户名、密码、连接url、网络连接等。JVM类加载器在加载类的时也广泛地使用它。\n当我们在程序中传递一个字符串的时候，如果这个字符串的内容是不可变的，那么我们就可以相信这个字符串中的内容。")])]),t._v(" "),n("blockquote",[n("p",[t._v("不可变性的缺点\n需要定义其他变量来存储计算结果，如果是复杂的字符串处理，会生成很多中间变量。可以通过StringBuilder处理。")])]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"_5-字符串stringbuilder"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-字符串stringbuilder"}},[t._v("#")]),t._v(" 5 字符串StringBuilder")]),t._v(" "),n("p",[t._v("String和StringBuilder的区别：")]),t._v(" "),n("ol",[n("li",[t._v("String具有不可变性；")]),t._v(" "),n("li",[t._v("StringBukder不具备可变性。")])]),t._v(" "),n("blockquote",[n("p",[t._v("当频繁操作字符串，用String会产生大量的中间变量和常量池大量的废弃数据,推荐使用StringBuilder可以避免。")])]),t._v(" "),n("p",[t._v("StringBuilder和StringBuffer 两者基本相似，StringBuffer是线程安全，而StringBuilder没有。所以StringBuiler性能略高。")])])}),[],!1,null,null,null);r.default=a.exports}}]);