(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{321:function(t,n,e){t.exports=e.p+"assets/img/throwable1.68a9b360.png"},386:function(t,n,e){"use strict";e.r(n);var a=e(28),i=Object(a.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),a("p",[t._v("throwable类有两个重要子类：")]),t._v(" "),a("ol",[a("li",[t._v("Error：程序无法处理的错误，如虚拟机错误、内存溢出。不用去处理")]),t._v(" "),a("li",[t._v("Exception：程序本身可以处理的异常。")])]),t._v(" "),a("h2",{attrs:{id:"_1-1-异常处理机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-异常处理机制"}},[t._v("#")]),t._v(" 1.1 异常处理机制")]),t._v(" "),a("p",[t._v("处理机制为：抛出异常，才能捕获异常。")]),t._v(" "),a("p",[t._v("对于运行时异常、错误或可查异常，java对异常处理方式不同。")]),t._v(" "),a("ol",[a("li",[t._v("对可查异常必须捕获、或者声明抛出。")]),t._v(" "),a("li",[t._v("循序忽略不可插的RuntimeException(含子类)和Error(含子类)。")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(321),alt:"An image"}})]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_1-2-try-catch-finally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-try-catch-finally"}},[t._v("#")]),t._v(" 1.2 try-catch-finally")]),t._v(" "),a("p",[t._v("try块后可接0个或多个catch块，如果没有catch块，则必须跟一个finally块。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import java.util.Scanner;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.println("====运算来说====");\n        try{\n            System.out.print("请输入第一个整数");\n            int one = input.nextInt();\n            System.out.print("请输入第二个整数");\n            int two = input.nextInt();\n            System.out.print("商是："+(one/two));\n        }catch (Exception e){\n            System.out.println("程序出错了");\n            e.printStackTrace(); //输出错误信息\n        }finally {\n            System.out.println("====运行结束====");\n        }\n    }\n}\n')])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"_1-3-不同异常不同处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-不同异常不同处理"}},[t._v("#")]),t._v(" 1.3 不同异常不同处理")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t\ttry{\n            System.out.print("请输入第一个整数");\n            int one = input.nextInt();\n            System.out.print("请输入第二个整数");\n            int two = input.nextInt();\n            System.out.print("商是："+(one/two));\n        }catch (ArithmeticException e){\n            System.out.println("除数不能为0");\n            e.printStackTrace(); //输出错误信息\n        }catch (InputMismatchException e){\n            System.out.println("请输入整数");\n            e.printStackTrace(); //输出错误信息\n        }catch (Exception e){  //一般不能完全捕获所有的异常信息，所以也会用Exception e来捕获其他异常。 放到最后。\n            System.out.println("出错了");\n        }finally {\n            System.out.println("====运行结束====");\n        }\n')])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"_1-4-如何终止finally运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-如何终止finally运行"}},[t._v("#")]),t._v(" 1.4 如何终止finally运行")]),t._v(" "),a("p",[t._v("终止程序运行： System.exit(非零参数)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t\ttry{\n            System.out.print("请输入第一个整数");\n            int one = input.nextInt();\n            System.out.print("请输入第二个整数");\n            int two = input.nextInt();\n            System.out.print("商是："+(one/two));\n        }catch (ArithmeticException e){\n            System.out.println("除数不能为0");\n            e.printStackTrace(); //输出错误信息\n\t\t\tSystem.exit(1);\n        }catch (InputMismatchException e){\n            System.out.println("请输入整数");\n            e.printStackTrace(); //输出错误信息\n        }catch (Exception e){  //一般不能完全捕获所有的异常信息，所以也会用Exception e来捕获其他异常。 放到最后。\n            System.out.println("出错了");\n        }finally {\n            System.out.println("====运行结束====");\n        }\n')])])]),a("p",[t._v("docs.oracle.com")]),t._v(" "),a("p",[t._v("System类再java.lang包里，程序运行时，这个包被系统自动加载，所以不同自己引入。")]),t._v(" "),a("p",[t._v("public final class System  ，ta是final修饰的，即不可以继承，也不可以new。")]),t._v(" "),a("h2",{attrs:{id:"_1-5-异常处理中的return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-异常处理中的return"}},[t._v("#")]),t._v(" 1.5 异常处理中的return")]),t._v(" "),a("p",[t._v("若finally中有return，try、catch中的return都不会被执行。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import java.util.Scanner;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        int res = get1();\n        System.out.println(res);\n    }\n\n    public static int get1(){\n        Scanner input = new Scanner(System.in);\n        System.out.println("====运算开始====");\n        try{\n            System.out.print("请输入第一个整数");\n            int one = input.nextInt();\n            System.out.print("请输入第二个整数");\n            int two = input.nextInt();\n            return one/two;\n        }catch (Exception e){\n            System.out.println("出错了");\n            return 0;\n        }finally {\n            System.out.println("====运行结束====");\n            return 100000;\n        }\n    }\n}\n')])])]),a("h2",{attrs:{id:"_2-thowrs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-thowrs"}},[t._v("#")]),t._v(" 2 thowrs")]),t._v(" "),a("p",[t._v("通过throws声明将要抛出何种类型的异常，通过throw将产生的异常抛出。")]),t._v(" "),a("p",[t._v("如果一个方法可能会出现异常，但没有能力处理这种异常，可以再方法声明处用throws子句来声明抛出异常。谁调用这个方法，谁来处理这个异常。")]),t._v(" "),a("p",[t._v("throws语句用在方法定义时声明该方法要排除的异常类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pubclic void method() throws Exception1,Exception2,...,ExceptionN{\n\t//可能产生异常的代码\n}\n")])])]),a("p",[t._v("当方法排除异常列表中的异常时，方法将不对这些类型及其子类型的异常作处理，而抛向调用该方法的方法，由ta去处理。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        try{\n            int res = get1();\n            System.out.println(res);\n        } catch (ArithmeticException e) { //\n            System.out.println("除数不能为零");\n            e.printStackTrace();\n        } catch (InputMismatchException e){\n            System.out.println("请输入整数");\n            e.printStackTrace();\n        } catch (Exception e){\n            System.out.println("有错误");\n        }\n\n\n    }\n\n    //throws声明了该方法可能报的异常，谁调用谁处理这些异常。\n//    public static int get1() throws ArithmeticException,InputMismatchException {\n//        Scanner input = new Scanner(System.in);\n//        System.out.println("====运算开始====");\n//        System.out.print("请输入第一个整数");\n//        int one = input.nextInt();\n//        System.out.print("请输入第二个整数");\n//        int two = input.nextInt();\n//        return one/two;\n//    }\n\n    //也可以偷懒，用异常父类 Exception\n    public static int get1() throws Exception {\n        Scanner input = new Scanner(System.in);\n        System.out.println("====运算开始====");\n        System.out.print("请输入第一个整数");\n        int one = input.nextInt();\n        System.out.print("请输入第二个整数");\n        int two = input.nextInt();\n        return one/two;\n    }\n}\n')])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"_3-throw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-throw"}},[t._v("#")]),t._v(" 3 throw")]),t._v(" "),a("p",[t._v("throw用来抛出一个异常，如 throw New IOException();")]),t._v(" "),a("p",[t._v("throw抛出的只能是可抛出类Throwable或者子类的实例对象。")]),t._v(" "),a("p",[t._v("throw抛出异常通常由两种方案：")]),t._v(" "),a("ol",[a("li",[t._v("throw抛出的异常，自己处理")]),t._v(" "),a("li",[t._v("在抛出异常处，用throws标识异常类型。谁调用方法，谁处理异常。")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-throw抛出的异常，自己处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-throw抛出的异常，自己处理"}},[t._v("#")]),t._v(" 3.1 throw抛出的异常，自己处理")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public void method(){\n\ttry{\n\t\t//daima\n\t\tthrow new 异常类型();\n\t}catch(异常类型 ex) {\n\t\t//对异常进行处理的代码\n\t}\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import java.util.Scanner;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        testAge();\n    }\n\n    //描述酒店的入驻规则：限定年龄，18岁以下、80岁以上的住客必须有亲友陪伴\n    public static void testAge(){\n        try{\n            System.out.println("请输入年龄：");\n            Scanner input = new Scanner(System.in);\n            int age = input.nextInt();\n            if(age < 18 || age > 80){\n                throw new Exception("18岁以下，80岁以上的住客必须有亲友陪伴");\n            }else{\n                System.out.println("欢迎入驻本酒店");\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n')])])]),a("h3",{attrs:{id:"_3-2-throws-谁调用，谁处理异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-throws-谁调用，谁处理异常"}},[t._v("#")]),t._v(" 3.2 throws 谁调用，谁处理异常")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public void method() throws 异常类型{\n\t//daima\n\t\tthrow new 异常类型();\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\nimport java.util.Scanner;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        try {\n            testAge();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    //描述酒店的入驻规则：限定年龄，18岁以下、80岁以上的住客必须有亲友陪伴\n    public static void testAge() throws Exception{\n        System.out.println("请输入年龄：");\n        Scanner input = new Scanner(System.in);\n        int age = input.nextInt();\n        if(age < 18 || age > 80){\n            throw new Exception("18岁以下，80岁以上的住客必须有亲友陪伴");\n        }else{\n            System.out.println("欢迎入驻本酒店");\n        }\n    }\n}\n')])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"_4-自定义类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-自定义类型"}},[t._v("#")]),t._v(" 4 自定义类型")]),t._v(" "),a("p",[t._v("自定义异常，就是定义一个类，去继承Throwable类或者ta的子类。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("package imooc.lcs.test;\n\npublic class HException extends Exception{\n    public HException(String str){\n        super(str);\n    }\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\nimport imooc.lcs.test.HException;\n\nimport java.util.Scanner;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        try {\n            testAge();\n        } catch (HException e) {\n            System.out.println(e.getMessage());\n            System.out.println("酒店前台工作任意不允许办理入住登记");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    //描述酒店的入驻规则：限定年龄，18岁以下、80岁以上的住客必须有亲友陪伴\n    public static void testAge() throws Exception{\n        System.out.println("请输入年龄：");\n        Scanner input = new Scanner(System.in);\n        int age = input.nextInt();\n        if(age < 18 || age > 80){\n            throw new HException("18岁以下，80岁以上的住客必须有亲友陪伴");\n        }else{\n            System.out.println("欢迎入驻本酒店");\n        }\n    }\n}\n')])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"_5-异常链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-异常链"}},[t._v("#")]),t._v(" 5 异常链")]),t._v(" "),a("p",[t._v("捕获异常后，再抛出另一个异常。且保留前面异常的信息。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("package imooc.lcs.test;\n\npublic class HException extends Exception{\n    public HException(String str){\n        super(str);\n    }\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import imooc.lcs.test.HException;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        try{\n            testThree();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    public static void testOne() throws Exception{\n       throw new HException("lcs123");\n    }\n\n    public static void testTwo(){\n        try{\n            testOne();\n        }catch (HException e){    //异常111\n            // throw抛出异常，用方法1.自己处理\n            try {\n                throw new Exception("辛的异常1",e);  //保留前面异常信息方法1。   异常111 的信息\n            } catch (Exception exception) {\n                exception.printStackTrace();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void testThree() throws Exception {\n        try {\n            testTwo();\n        }catch (Exception e){\n            //throw new Exception("辛的异常2");\n            //保留异常信息方法2\n            Exception e1 = new Exception("辛的异常2");\n            e1.initCause(e);\n            throw e1;\n\n        }\n    }\n}\n')])])])])}),[],!1,null,null,null);n.default=i.exports}}]);